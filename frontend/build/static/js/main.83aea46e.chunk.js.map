{"version":3,"sources":["imgs/logo50.png","common/templates/loading/loading.gif","views/notFound/404.png","serviceWorker.js","common/constants.js","common/templates/header/index.jsx","common/templates/sidebar/index.jsx","common/templates/base/index.jsx","common/templates/panel/index.jsx","common/templates/loading/index.jsx","views/index/index.jsx","views/data/index.jsx","views/notFound/index.jsx","main/App.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","constantes","props","className","href","data-test","src","logo","alt","disease","Sidebar","to","target","rel","Component","Fragment","title","role","children","loading","DADOS","Index","state","dados_gerais","dados_especificos","mostraGraficos","axios","get","then","resp","setState","data","catch","e","console","log","setInterval","this","_get_dados","_set_continuos_get","date","indexOf","dateSplit","split","length","_format_date","last_update","infected","dead","lethality","height","chartType","options","series","titleX","titleY","lineWidth","pointSize","hAxis","slantedText","slantedTextAngle","vAxis","forEach","dados","d","day","infected_news","push","_render_grafico_linha","0","color","1","Number","_render_grafico_totais","_render_grafico_dia_infectados","_render_grafico_dia_mortos","_render_grafico_dia_letalidae","_render_dados_gerais","_render_graficos","Data","map","key","id","infected_porcents","infected_news_porcents","dead_porcents","dead_news","dead_news_porcents","_render_table_line","_render_table_dados","imgagemEscolhida","path","exact","component","NotFound","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.83aea46e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo50.78de8641.png\";","module.exports = __webpack_public_path__ + \"static/media/loading.baeaf0c7.gif\";","module.exports = __webpack_public_path__ + \"static/media/404.9adc6c33.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const constantes = {\r\n    //API_URL: 'http://localhost:8000'\r\n    API_URL: ''\r\n}","import React from 'react'\r\n\r\nimport logo from '../../../imgs/logo50.png'\r\n\r\nexport default props => {\r\n        return (\r\n            <header>\r\n                <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n                    <a className=\"navbar-brand col-sm-3 col-md-2 mr-0\" href=\"/\">\r\n                        <img className=\"img-thumbnail\" data-test='logo' src={logo} alt=\"Logo\"/>\r\n                            &nbsp; {props.disease}\r\n                    </a>\r\n                </nav>\r\n            </header>\r\n        )\r\n    }\r\n","import React, { Component }  from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport './sidebar.css';\r\n\r\n\r\nclass Sidebar extends Component {\r\n\r\n    render(){\r\n        return (\r\n            <nav className=\"col-sm-2 d-none d-sm-block bg-light sidebar\">\r\n                <div className=\"sidebar-sticky\">\r\n                    <ul className=\"nav flex-column sidebar-nav\">\r\n                        <li className=\"nav-item centraliza_texto \">\r\n                            <Link className=\"nav-link sidebar-nav-item-a\" to=\"/\">Index</Link>\r\n                            \r\n                        </li>\r\n                        <li className=\"nav-item centraliza_texto\">\r\n                            <Link className=\"nav-link sidebar-nav-item-a\" to=\"/dados\">Dados Diarios</Link>\r\n                        </li>\r\n                    </ul>\r\n                    <h6 className=\"centraliza_texto\">Desenvolvedor</h6>\r\n                    <ul className=\"nav flex-column mb-2\">\r\n                        <li className=\"nav-item centraliza_texto\">\r\n                            <a className=\"nav-link  sidebar-nav-item-a\" target=\"_blank\"  rel=\"noopener noreferrer\" href=\"http://lariodiniz.com.br/\">Lário Diniz</a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Sidebar\r\n","import React from 'react'\r\n\r\nimport Header from '../header'\r\nimport Sidebar from '../sidebar'\r\n\r\nimport './base.css';\r\n\r\nexport default props => (\r\n\r\n    <React.Fragment>\r\n\r\n        <Header disease={props.disease} title={props.title}/>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <Sidebar/>\r\n                <main role=\"main\" className=\"col-12 col-sm-10 main\">\r\n                    {props.children}\r\n                </main>\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n\r\n)\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nimport './panel.css';\r\n\r\nexport default props => (\r\n        <div className=\"row panel_div\">\r\n            <div className=\"col\">\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n)\r\n\r\n\r\n\r\n","\r\nimport React from 'react'\r\nimport loading from './loading.gif'\r\n\r\nexport default props => (\r\n    <div className='image'>\r\n            <img className=\"img-thumbnail\" data-test='loading' src={loading} alt=\"loading\"/>\r\n    </div>\r\n)","import React, { Component }  from 'react'\r\n\r\nimport axios from 'axios'\r\nimport { Chart } from \"react-google-charts\";\r\n\r\n\r\nimport { constantes } from '../../common/constants'\r\n\r\nimport Base from '../../common/templates/base'\r\nimport Panel from '../../common/templates/panel'\r\nimport Loading from '../../common/templates/loading'\r\n\r\nvar DADOS = {\r\n    'last_update': '00/00/0000',\r\n    'infected': 0,\r\n    'dead': 0,\r\n    'lethality': 0\r\n}\r\n\r\nclass Index extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {dados_gerais: DADOS, dados_especificos: {}, mostraGraficos: false}\r\n    }\r\n\r\n    _get_dados(){\r\n        axios.get(`${constantes.API_URL}/api/totais`).then((resp) =>{\r\n            this.setState( {...this.state, dados_gerais:resp.data})\r\n        }).catch(e=>console.log(e))\r\n\r\n        axios.get(`${constantes.API_URL}/api/diario`).then((resp) =>{\r\n            this.setState( {...this.state, dados_especificos:resp.data, mostraGraficos:true})\r\n        }).catch(e=>console.log(e))\r\n\r\n    }\r\n\r\n    _set_continuos_get(){\r\n        setInterval(this._get_dados(), 30000);\r\n    }\r\n\r\n    componentWillMount(){\r\n        this._get_dados()\r\n        this._set_continuos_get()\r\n    }\r\n\r\n    _format_date(date){\r\n        if (date && date.indexOf(\"-\") !== -1){\r\n            let dateSplit = date.split('-')\r\n\r\n            if (dateSplit.length === 3){\r\n                return `${dateSplit[2]}/${dateSplit[1]}/${dateSplit[0]}`\r\n            }\r\n        }\r\n\r\n        return date\r\n    }\r\n\r\n    _render_dados_gerais(){\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <h3>Dados Totais</h3>\r\n                    <div className=\"table-responsive\">\r\n                        <table className=\"table table-bordered\">\r\n                            <thead className=\"thead-dark\">\r\n                                <tr>\r\n                                    <th>Atualizado</th>\r\n                                    <th>Total de Infectados</th>\r\n                                    <th>Total de Mortos</th>\r\n                                    <th>Letalidade</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr className=\"table-danger centraliza_texto\">\r\n                                    <td>{this._format_date(this.state.dados_gerais.last_update)}</td>\r\n                                    <td>{this.state.dados_gerais.infected}</td>\r\n                                    <td>{this.state.dados_gerais.dead}</td>\r\n                                    <td>{this.state.dados_gerais.lethality} % </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    _render_grafico_totais(){\r\n        let options ={\r\n            title: 'Popoulação Brasileira'\r\n          }\r\n\r\n        let data =[\r\n            ['Estatos', 'Quantidade'],\r\n            ['Saldavel', (211462943 - this.state.dados_gerais.infected)],\r\n            ['Infectados', this.state.dados_gerais.infected],\r\n            ['Mortos', this.state.dados_gerais.dead],\r\n          ]\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <Chart \r\n                    height={'300px'}\r\n                    chartType=\"PieChart\"\r\n                    data={data}\r\n                    options={options}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    _render_grafico_linha(series, data, titleX, titleY){\r\n\r\n        let options = {\r\n            series: series,\r\n              lineWidth: 3,\r\n              pointSize: 5,\r\n            hAxis: {\r\n              title: titleX,\r\n              slantedText:true, \r\n              slantedTextAngle:90,\r\n\r\n            },\r\n            vAxis: {\r\n              title: titleY,\r\n            },\r\n          }\r\n          return (\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <div className='image'>\r\n                        <Chart \r\n                        height={'300px'}\r\n                        chartType=\"LineChart\"\r\n                        data={data}\r\n                        options={options}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    _render_grafico_dia_infectados(){\r\n        let series = {\r\n            0: { color: '#e2431e' },\r\n            1: { color: '#43459d' }\r\n\r\n          }\r\n\r\n          let data = [['Dia', 'Infectados', 'Novos Infectados']]\r\n\r\n          this.state.dados_especificos.forEach((dados) => {\r\n                let d = [this._format_date(dados.day),dados.infected, dados.infected_news]\r\n                data.push(d)\r\n            })\r\n\r\n        return this._render_grafico_linha(series, data,'Dia', 'Infectados')\r\n    }\r\n\r\n    _render_grafico_dia_mortos(){\r\n        let series = { 0: { color: '#e2431e' }}\r\n          let data = [['Dia', 'Mortos']]\r\n\r\n          this.state.dados_especificos.forEach((dados) => {\r\n                let d = [this._format_date(dados.day),dados.dead]\r\n                data.push(d)\r\n            })\r\n\r\n        return this._render_grafico_linha(series, data,'Dia', 'Mortos')\r\n    }\r\n\r\n    _render_grafico_dia_letalidae(){\r\n        let series = { 0: { color: '#e2431e' }}\r\n          let data = [['Dia', 'Letalidade']]\r\n\r\n          \r\n          this.state.dados_especificos.forEach((dados) => {\r\n                let d = [this._format_date(dados.day), Number(dados.lethality)]\r\n                data.push(d)\r\n            })\r\n        \r\n        return this._render_grafico_linha(series, data,'Dia', 'Letalidade')\r\n    }\r\n\r\n    _render_graficos(){\r\n        if (!this.state.mostraGraficos) {\r\n            return <Loading />\r\n        }\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    {this._render_grafico_totais()}\r\n                    <hr />\r\n                    <h3>Infectados / Dia</h3>\r\n                    {this._render_grafico_dia_infectados()}\r\n                    <hr />\r\n                    <h3>Mortos / Dia</h3>\r\n                    {this._render_grafico_dia_mortos()}\r\n                    <hr />\r\n                    <h3>Letalidade</h3>\r\n                    {this._render_grafico_dia_letalidae()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <Base disease=\"Sars-CoV-2 (Coronavirus)\">\r\n                <Panel>\r\n                    {this._render_dados_gerais()}\r\n                    <hr />\r\n                    {this._render_graficos()}\r\n                </Panel>\r\n            </Base>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Index","import React, { Component }  from 'react'\r\nimport Base from '../../common/templates/base'\r\nimport Panel from '../../common/templates/panel'\r\nimport Loading from '../../common/templates/loading'\r\n\r\n\r\nimport axios from 'axios'\r\nimport { constantes } from '../../common/constants'\r\n\r\n\r\nclass Data extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {dados_especificos: {}, mostraGraficos: false}\r\n    }\r\n\r\n    _get_dados(){\r\n        axios.get(`${constantes.API_URL}/api/diario`).then((resp) =>{\r\n            this.setState( {...this.state, dados_especificos:resp.data, mostraGraficos:true})\r\n        }).catch(e=>console.log(e))\r\n        console.log('dados atualizados')\r\n        \r\n    }\r\n\r\n    _set_continuos_get(){\r\n        setInterval(this._get_dados, 30000);\r\n        \r\n    }\r\n\r\n    componentWillMount(){\r\n        this._get_dados()\r\n        this._set_continuos_get()\r\n    }\r\n      \r\n\r\n    _format_date(date){\r\n\r\n        if (date && date.indexOf(\"-\") !== -1){\r\n            let dateSplit = date.split('-')\r\n\r\n            if (dateSplit.length === 3){\r\n                return `${dateSplit[2]}/${dateSplit[1]}/${dateSplit[0]}`\r\n            }\r\n        }\r\n\r\n        return date\r\n    }\r\n\r\n    _render_table_line(){\r\n\r\n        return this.state.dados_especificos.map(dados =>{\r\n            \r\n            return (\r\n                <tr key={dados.id} className=\"centraliza_texto\">\r\n                    <td >{this._format_date(dados.day)}</td>\r\n                    <td>{dados.infected}</td>\r\n                    <td>{dados.infected_porcents}</td>\r\n                    <td>{dados.infected_news}</td>\r\n                    <td>{dados.infected_news_porcents}</td>\r\n                    <td>{dados.dead}</td>\r\n                    <td>{dados.dead_porcents}</td>\r\n                    <td>{dados.dead_news}</td>\r\n                    <td>{dados.dead_news_porcents}</td>\r\n                    <td>{dados.lethality}</td>\r\n                </tr>\r\n            )\r\n        }\r\n        )\r\n        \r\n    }\r\n\r\n    _render_table_dados(){\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <h3>Dados Diarios</h3>\r\n                    <div className=\"table-responsive\">\r\n                        <table className=\"table table-bordered table-striped table-sm\">\r\n                            <thead className=\"thead-dark\">\r\n                                <tr>\r\n                                    <th>Dia</th>\r\n                                    <th>Infectados</th>\r\n                                    <th>%</th>\r\n                                    <th>Novos Infectados</th>\r\n                                    <th>%</th>\r\n                                    <th>Mortos</th>\r\n                                    <th>%</th>\r\n                                    <th>Novos Mortos</th>\r\n                                    <th>%</th>\r\n                                    <th>Letalidade</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {this._render_table_line()}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    _render_graficos(){\r\n        if (!this.state.mostraGraficos) {\r\n            return <Loading />\r\n        }\r\n        return this._render_table_dados()\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <Base disease=\"Sars-CoV-2 (Coronavirus)\">\r\n                <Panel>\r\n                    {this._render_graficos()}\r\n                </Panel>\r\n            </Base>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Data","import React from 'react'\r\n\r\nimport imgagemEscolhida from './404.png'\r\n\r\nexport default props => (\r\n\r\n    <div className=\"container\">\r\n        <br />\r\n        <div className=\"row\"> \r\n            <div className='col'>\r\n                <div className=\"row justify-content-md-center\">\r\n                    <img className=\"img-fluid rounded\" alt=\"mostra 404 not found\" src={imgagemEscolhida}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\n\r\n\r\n","import '../common/dependencies'\r\nimport React from 'react'\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\r\n\r\nimport Index from '../views/index'\r\nimport Data from '../views/data'\r\nimport NotFound from '../views/notFound'\r\n\r\nexport default props => (\r\n    <BrowserRouter>\r\n    <Switch>\r\n            <Route path=\"/\" exact={true} component={Index} />\r\n            <Route path=\"/dados\" component={Data} />\r\n            <Route path='*' component={NotFound} />\r\n        </Switch>\r\n    </BrowserRouter>\r\n)\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport App from './main/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}